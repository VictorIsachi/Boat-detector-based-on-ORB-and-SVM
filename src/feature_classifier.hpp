#ifndef FEATURE_CLASSIDIER_HPP
#define FEATURE_CLASSIFIER_HPP

#include <iostream>
#include <cmath>
#include <string>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <time.h>

#include "boat_detector_utils.hpp"

#define SAMPLE_SIZE 32
#define NUM_REPLICAS 5
#define SEED (time(NULL))
#define TRAIN_TEST_RATIO 0.80
#define DIM_ORB_FEAT 32

class FeatureClassifier{

public:

	/*
	*@brief constructor
	*@param input_images a set of images
	*@param features a set of features associated with the image keypoint
	*@param clusters a clustering of the keypoint of the images
	*@param boxes the regions of interest associated with the clusters
	*@param labels set of binary labels (1 = boat, 0 = no boat) associated with the regions of interest
	*/
	FeatureClassifier(std::vector<cv::Mat> input_images, std::vector<cv::Mat> features, 
		std::vector< std::vector< std::vector<keypoint_t> > > clusters, 
		std::vector< std::vector<Vec5i> > boxes, std::vector<int> labels);

	/*
	*@brief constructor
	*@param input_images a set of images
	*@param features a set of features associated with the image keypoint
	*@param clusters a clustering of the keypoint of the images
	*@param boxes the regions of interest associated with the clusters
	*/
	FeatureClassifier(std::vector<cv::Mat> input_images, std::vector<cv::Mat> features, 
		std::vector< std::vector< std::vector<keypoint_t> > > clusters, std::vector< std::vector<Vec5i> > boxes);

	/*
	*@brief generates a training set and stores it locally
	*/
	void generateTrainingSet();

	/*
	*@brief generates files containing the training set and label set produced by generateTrainingSet()
	*@param filename_data the file where the training features should be saved
	*N.B. the file containing the training features follows the format: one line per training feature
	*     a training feature is represented as a uchar separated by ;
	*@param filename_labels the file where the labels of the training set shouls be saved
	*N.B. the file containing the labels stores one label per line
	*/
	void exportTrainingSet(std::string filename_data, std::string filename_labels);

	/*
	*@brief normalizes(from [0, 255] to [0, 1]) the data generated by generateTrainingSet() and splits it into training and testing sets. Stores the resulting dataset locally 
	*/
	void splitNormalizeData();

	/*
	*@brief generates an SVM model trained on the dataset produced by splitNormalizeData() and stores it locally. Prints the training and test errors
	*/
	void generateSVMModel();

	/*
	*@brief stores the SVM model produced by generateSVMModel()
	*@param file_path the file where the SVM model should be stored (.xml files are suggested)
	*/
	void exportSVMModel(cv::String file_path);

	/*
	*@brief loads an SVM model and stores it locally
	*@param file_path file where the SVM has been saved (.xml files are suggested)
	*/
	void importSVMModel(cv::String file_path);

	/*
	*@brief generates a set of normalized feature samples from the input images and stores it locally
	*/
	void generateSamples();

	/*
	*@brief uses the samples generated by generateSamples() to classify the images
	*/
	void classifyImages();

	/*
	*@brief uses the samples generated by generateSamples() to classify the images and computed the average IoU on the single image and on the whole dataset
	*@param file_path file containing the locations of boats
	*N.B. file format: one image per line, a line has format: x_min_1 x_max_1 y_min_1 y_max_1 x_min_2 x_max_2 y_min_2 y_max_2 ... x_min_n x_max_n y_min_n y_max_n
	*/
	void classifyImages(cv::String file_path);

private:

	// input images
	std::vector<cv::Mat> input_images;

	// vector of ORB features for each image
	std::vector<cv::Mat> features;

	// clustered keypoints for each image
	std::vector< std::vector< std::vector<keypoint_t> > > clusters;

	// coordinates of the boxes (top_x, top_y, bot_x, bot_y, cluster_index)
	std::vector< std::vector<Vec5i> > boxes;

	// labels for each box
	std::vector<int> labels;

	// generated dataset ([][]->boxFeatureSet;feature)
	std::vector< std::vector<cv::Mat> > extended_dataset;

	// generated labels for the dataset ([]->lableOfFeatureSet)
	std::vector<int> extended_labels;

	// data used to perform SVM model selection and training
	cv::Ptr<cv::ml::TrainData> svm_data;

	// SVM model used for classification
	cv::Ptr<cv::ml::SVM> svm;

	// dataset of features that need to be classified
	cv::Mat samples;

};

#endif /*FEATURE_CLASSIFIER_HPP*/